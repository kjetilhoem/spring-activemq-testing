<?xml version="1.0" encoding="UTF-8"?>
<beans default-autowire="no" xmlns="http://www.springframework.org/schema/beans" xmlns:p="http://www.springframework.org/schema/p"
    xmlns:jms="http://www.springframework.org/schema/integration/jms"
    xmlns:int="http://www.springframework.org/schema/integration"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/integration/jms
    http://www.springframework.org/schema/integration/jms/spring-integration-jms-2.0.xsd
    http://www.springframework.org/schema/integration
    http://www.springframework.org/schema/integration/spring-integration-2.0.xsd">
    
    <import resource="common.xml" />
    
    
    <!-- 
        Case #1, synchronous remote procedure call using JMS & tmp-queues for responses. This type of pattern
        is only applicable when the response isn't critical, i.e. when querying for data. If the producer goes
        down, the response-message will be lost.
        In this case, transactions don't make sense at all on the client-side.
     -->
     
        <!-- Proxy for the EmailValidator interface, delivers messages to the 'emailValidationRequestChannel' -->
    <int:gateway id="emailAddressValidator"
        service-interface="testing.common.EmailValidator"
        default-request-channel="emailValidationRequestChannel" />
        
        <!-- internal representation of the target JMS-queue -->
    <int:channel id="emailValidationRequestChannel" />
    
        <!--
            handles messages on the internal channel, converts them to JMS-messages, delivered to the
            'Infrastructure.EmailValidation' queue. Responses are delivered to a tmp-queue & piped back
            to the gateway.
         -->
    <jms:outbound-gateway request-channel="emailValidationRequestChannel"
        request-destination-name="Infrastructure.EmailValidation"
        message-converter="coreApiMarshallingMessageConverter"
        receive-timeout="1000" /> <!-- the timeout-handling can be triggered by invoking 'validateEmailAddress timeout' -->
        
        
        
    <!-- 
        Case #2, dispatch an important request, and handle it's response asynchronously. In this scenario both
        the request/reply could use transactions.
     -->
     
        <!-- outbound -->
    <int:gateway id="orderPublisher" service-interface="testing.producer.OrderPublisher"
        default-request-channel="newOrderRequestChannel" />
        
    <int:channel id="newOrderRequestChannel" />
        
    <jms:outbound-channel-adapter channel="newOrderRequestChannel"
        destination-name="Orders.New" />
        
        <!-- inbound -->
    <jms:message-driven-channel-adapter container="newOrderResponseContainer"
        channel="newOrderResponseChannel" />
        
    <bean id="newOrderResponseContainer" parent="abstractDurablePubSubMessageListenerContainer" 
        p:destinationName="Orders.Created"
        p:durableSubscriptionName="CreatedOrders" /> <!-- TODO change to abstractTransactionalDurablePub.. -->
    
    <int:channel id="newOrderResponseChannel" />
        
    <int:service-activator input-channel="newOrderResponseChannel"
        ref="orderStatusListenerEndpoint" />
        
        
        
    <!-- 
        Case #3, dispatch messages to a topic, event-style
     -->
    <int:gateway id="statsReporter" service-interface="testing.producer.StatsReporter"
        default-request-channel="statsChannel" />
     
    <int:channel id="statsChannel" />
    
    <jms:outbound-channel-adapter channel="statsChannel"
        destination-name="Stats.Producer"
        pub-sub-domain="true" />
         
</beans>
