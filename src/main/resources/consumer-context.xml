<?xml version="1.0" encoding="UTF-8"?>
<beans default-autowire="no" xmlns="http://www.springframework.org/schema/beans" xmlns:p="http://www.springframework.org/schema/p"
    xmlns:jms="http://www.springframework.org/schema/integration/jms"
    xmlns:int="http://www.springframework.org/schema/integration"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/integration/jms
    http://www.springframework.org/schema/integration/jms/spring-integration-jms-2.0.xsd
    http://www.springframework.org/schema/integration
    http://www.springframework.org/schema/integration/spring-integration-2.0.xsd">
    
    <import resource="common.xml" />
    
    
    <!--
        Case #1, handle different types of email-related requests on a single queue. Pipe the requests into
        a service-activator used to invoke consumer.EmailValidatorEndpoint. Responses are automatically
        delivered back to the request's ReplyTo queue. Consumer-side transactions are applicable for this scenario,
        but the actual messages here (email-validation) doesn't seem to require them =)
     -->
     
        <!-- handles incoming JMS-messages & their outgoing responses -->
    <jms:inbound-gateway id="EmailValidationGateway" container="emailValidationContainer"
        message-converter="coreApiMarshallingMessageConverter"
        request-channel="emailValidationChannel" />
        
    <bean id="emailValidationContainer" parent="abstractMessageListenerContainer"
        p:destinationName="Infrastructure.EmailValidation" />
    
        <!-- internal representation of the 'Infrastructure.EmailValidation' JMS-queue -->    
    <int:channel id="emailValidationChannel" />
    
        <!--
            Service-activator linking the queue to our endpoint 'testing.consumer.EmailValidatorEndpoint'.
            This also serves as a form of content-based routing, since different request-types are directed
            to different endpoint-methods. 
         -->
    <int:service-activator input-channel="emailValidationChannel" ref="emailValidatorEndpoint" />
    
    
    
    <!-- 
        Case #2, handle some important request-message, do some work in a local database & send a response-
        message. In this case, transactions are applicable at both sides. This scenario follows the same
        pattern as #1.
     -->
        <!-- listens for incoming orders on the queue 'Orders.New' -->
    <jms:message-driven-channel-adapter container="newOrderContainer"
        channel="newOrderChannel" />
        
    <bean id="newOrderContainer" parent="abstractMessageListenerContainer"
        p:destinationName="Orders.New" /> <!-- TODO, change to an abstractTransactionalMessageListenerContainer -->
    
    <int:channel id="newOrderChannel" />
    
        <!-- invokes 'testing.consumer.OrderManagerEndpoint' with the order-creation requests -->
    <int:service-activator input-channel="newOrderChannel" ref="orderManagerEndpoint"
        output-channel="newOrderResponseChannel" />
        
    <int:channel id="newOrderResponseChannel" />
    
        <!-- publishes the order-creation responses to the topic 'Orders.Created' -->
    <jms:outbound-channel-adapter channel="newOrderResponseChannel"
        pub-sub-domain="true"
        destination-name="Orders.Created" />
    
    
    
    <!-- 
        Case #3 listen for stats/events on all Stats.> topics
     -->    
    <jms:message-driven-channel-adapter container="statsContainer"
        channel="statsChannel" />
        
    <bean id="statsContainer" parent="abstractDurablePubSubMessageListenerContainer" 
        p:destinationName="Stats.>"
        p:durableSubscriptionName="AllStats" /> <!-- TODO change to abstractTransactionalDurablePub.. -->
        
    <int:channel id="statsChannel" />
    
    <int:service-activator input-channel="statsChannel" ref="statsEndpoint" />
    
</beans>
